services:
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./nginx-config/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network
    depends_on:
      - backend
      - frontend
      - products # Añadido el servicio de productos

  backend:
    build: ./backend
    container_name: backend
    environment:
      - DB_HOST=postgres-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=my_database
    networks:
      - app-network
    depends_on:
      - postgres-db
      - redis
    ports:
      - "5000:5000"  # Backend escucha en el puerto 5000

  frontend:
    build: ./frontend
    container_name: frontend
    networks:
      - app-network
          
  postgres-db:
    image: postgres:13.22-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=my_database
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql  # Montamos el archivo SQL
      
    ports:
      - "5446:5432"  # Exponemos el puerto 5432 hacia el exterior
    command: ["postgres", "-c", "listen_addresses=*"]
    restart: always
  
  products:
    build: ./products # Ruta de tu servicio products
    container_name: products
    # environment:
    #   - MONGO_URI=mongodb://mongo:27017/my_database
      
    networks:
      - app-network
    depends_on:
      - mongo-db
      - redis
    ports:
      - "5001:5001"  # Exponiendo el puerto 5001 en el host y mapeando al puerto 5000 dentro del contenedor
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
    #   interval: 30s
    #   retries: 3
    #   start_period: 30s
    #   timeout: 10s

  mongo-db:
    image: mongo:7
    container_name: mongo-db
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
      - ./products/mongo-init:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    restart: always

  redis:
    image: redis:7-alpine
    container_name: products-redis
    ports:
      - "6379:6379"
    networks:
      - app-network

networks:
  app-network:
    name: app-network   # Aquí especificamos el nombre de la red
    driver: bridge

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
